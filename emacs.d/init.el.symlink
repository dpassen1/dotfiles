(require 'package)
(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/"))
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(setq package-pinned-packages '((use-package . "melpa-stable")))
(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))

(use-package ace-jump-mode
  :ensure t
  :pin    melpa-stable
  :defer  t
  :bind   ("C-c j" . ace-jump-mode))

(use-package autorevert
  :diminish auto-revert-mode
  :config   (global-auto-revert-mode t))

(use-package better-defaults
  :ensure t
  :pin    melpa)

(use-package cider
  :ensure t
  :pin    melpa-stable
  :defer  t
  :init   (add-hook 'cider-repl-mode-hook 'paredit-mode)
          (add-hook 'cider-repl-mode-hook 'subword-mode)
          (add-hook 'cider-repl-mode-hook 'rainbow-delimiters-mode)
  :config (setq cider-repl-history-file        (let ((default-directory (clojure-project-dir (cider-current-dir))))
                                                 (expand-file-name ".cider-repl-history"))
                cider-prompt-save-file-on-load 'always-save
                cider-repl-display-help-banner nil
                cider-repl-use-pretty-printing t
                cider-mode-line-show-connection nil))

(use-package clojure-mode
  :ensure t
  :pin    melpa-stable
  :mode   (("\\.clj\\'" . clojure-mode)
           ("\\.edn\\'" . clojure-mode))
  :init   (add-hook 'clojure-mode-hook 'paredit-mode)
          (add-hook 'clojure-mode-hook 'subword-mode)
          (add-hook 'clojure-mode-hook 'rainbow-delimiters-mode))

(use-package emmet-mode
  :ensure t
  :pin    melpa-stable
  :defer  t
  :config (setq emmet-preview-default nil))

(use-package expand-region
  :ensure t
  :pin    melpa
  :defer  t
  :bind   ("C-c w" . er/expand-region))

(use-package find-file-in-repository
  :ensure t
  :pin    melpa-stable
  :defer  t
  :bind   ("C-x M-f" . find-file-in-repository))

(use-package linum
  :init   (global-linum-mode t)
  :config (defadvice linum-update-window (around linum-dynamic activate)
            (let* ((w (length (number-to-string (count-lines (point-min) (point-max)))))
                   (linum-format (concat "%" (number-to-string (max 2 w)) "d ")))
              ad-do-it)))

(use-package magit
  :ensure t
  :pin    melpa-stable
  :defer  t
  :bind   ("C-x g" . magit-status))

(use-package markdown-mode
  :ensure t
  :pin    melpa-stable
  :mode   ("\\.md\\'" . markdown-mode))

(use-package menu-item
  :bind ("C-x k" . kill-this-buffer))

(use-package multi-term
  :ensure t
  :pin    melpa
  :defer  t
  :bind   ("C-x RET" . multi-term)
  :config (add-to-list 'term-bind-key-alist '("C-z" . term-stop-subjob))
          (setq term-bind-key-alist (delete '("C-r" . isearch-backward) term-bind-key-alist))
          (add-to-list 'term-bind-key-alist '("C-r" . term-send-reverse-search-history)))

(use-package org
  :init   (add-hook 'org-mode-hook #'org-indent-mode)
          (add-hook 'org-mode-hook #'visual-line-mode))

(use-package paredit
  :ensure t
  :pin    melpa-stable)

(use-package prog-mode
  :config (add-hook 'prog-mode-hook #'hs-minor-mode)
          (add-hook 'prog-mode-hook #'whitespace-mode))

(use-package rainbow-delimiters
  :ensure t
  :pin    melpa-stable)

(use-package restclient
  :ensure t
  :pin    melpa
  :defer  t)

(use-package smex
  :ensure t
  :pin    melpa-stable
  :bind   (("M-x" . smex)
           ("M-X" . smex-major-mode-commands)
           ("C-c C-c M-x" .  execute-extended-command)))

(use-package twittering-mode
  :ensure t
  :pin    melpa-stable
  :defer  t
  :init   (setq twittering-use-master-password t
                twittering-status-format       " %S (%s) %@:
%FILL[  ]{%T%r%R}
 "))

(use-package view
  :config (global-set-key "\C-v" 'View-scroll-half-page-forward)
          (global-set-key "\M-v" 'View-scroll-half-page-backward))

(use-package web-mode
  :ensure t
  :pin    melpa-stable
  :mode   (("\\.html?\\'"  . web-mode)
           ("\\.js[x]?\\'" . web-mode))
  :config (setq web-mode-enable-auto-closing t)
          (setq web-mode-markup-indent-offset 2)
  :init   (add-hook 'web-mode-hook 'emmet-mode))

(use-package whitespace
  :diminish whitespace-mode
  :init     (setq whitespace-line-column 80)
            (setq whitespace-style '(face trailing lines-tail tabs)))

(use-package zenburn-theme
  :ensure t
  :pin    melpa-stable
  :config (load-theme 'zenburn t))

;; Prevent loading screen
(setq-default inhibit-startup-screen t)

;; Spaces only (no tab characters at all)!
(setq-default indent-tabs-mode nil)

;; Always show column numbers.
(setq-default column-number-mode t)

;; Stop flashing!
(setq ring-bell-function 'ignore)

;; trim trailing whitespace on saves
(add-hook 'before-save-hook 'delete-trailing-whitespace)

;; I just tripled my productivity
(defalias 'yes-or-no-p 'y-or-n-p)
