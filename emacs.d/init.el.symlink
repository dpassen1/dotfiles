(require 'package)
(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/"))
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(setq package-pinned-packages '((use-package . "melpa-stable")))
(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))

(use-package ag
  :ensure t
  :pin    melpa-stable
  :defer  t
  :bind   (("C-c a" . ag-project)
           ("C-c A" . ag-project-regexp))
  :init   (add-hook 'ag-search-finished-hook (lambda () (pop-to-buffer next-error-last-buffer)))
  :config (setq ag-highlight-search 1))

(use-package autorevert
  :diminish auto-revert-mode
  :config   (global-auto-revert-mode t))

(use-package better-defaults
  :ensure t
  :pin    melpa)

(use-package cider
  :ensure t
  :pin    melpa-stable
  :defer  t
  :init   (add-hook 'cider-repl-mode-hook 'paredit-mode)
          (add-hook 'cider-repl-mode-hook 'subword-mode)
          (add-hook 'cider-repl-mode-hook 'rainbow-delimiters-mode)
  :config (setq cider-repl-history-file         (let ((default-directory (clojure-project-dir (cider-current-dir))))
                                                  (expand-file-name ".cider-repl-history"))
                cider-prompt-save-file-on-load  'always-save
                cider-repl-display-help-banner  nil
                cider-repl-use-pretty-printing  t
                cider-mode-line-show-connection nil))

(use-package clojure-mode
  :ensure t
  :pin    melpa-stable
  :defer  t
  :init   (add-hook 'clojure-mode-hook 'paredit-mode)
          (add-hook 'clojure-mode-hook 'subword-mode)
          (add-hook 'clojure-mode-hook 'rainbow-delimiters-mode))

(use-package dumb-jump
  :ensure t
  :pin    melpa-stable
  :defer  t
  :bind  (("M-g o" . dumb-jump-go-other-window)
          ("M-g j" . dumb-jump-go))
  :config (setq dumb-jump-prefer-searcher 'ag))

(use-package emmet-mode
  :ensure t
  :pin    melpa
  :defer  t
  :config (setq emmet-preview-default nil)
          (define-key emmet-mode-keymap (kbd "C-c w") nil))

(use-package exec-path-from-shell
  :ensure t
  :pin    melpa-stable
  :config (when (memq window-system '(mac ns))
            (exec-path-from-shell-initialize)))

(use-package expand-region
  :ensure t
  :pin    melpa
  :defer  t
  :bind   ("C-c w" . er/expand-region)
  :config (er/enable-mode-expansions 'rjsx-mode 'er/add-html-mode-expansions))

(use-package find-file-in-repository
  :ensure t
  :pin    melpa-stable
  :defer  t
  :bind   ("C-x M-f" . find-file-in-repository))

(use-package hide-region
  :ensure t
  :pin    melpa
  :defer  t
  :bind   (("C-c h r" . hide-region-hide)
           ("C-c h u" . hide-region-unhide))
  :config (setq hide-region-before-string ".."
                hide-region-after-string  ".."))

(use-package hideshow
  :diminish hs-minor-mode)

(use-package linum
  :init   (global-linum-mode t)
  :config (defadvice linum-update-window (around linum-dynamic activate)
            (let* ((w (length (number-to-string (count-lines (point-min) (point-max)))))
                   (linum-format (concat "%" (number-to-string (max 2 w)) "d ")))
              ad-do-it)))

(use-package magit
  :ensure t
  :pin    melpa-stable
  :defer  t
  :bind   ("C-x g" . magit-status))

(use-package markdown-mode
  :ensure t
  :pin    melpa-stable
  :defer  t
  :mode   ("\\.md\\'" . markdown-mode))

(use-package menu-item
  :bind ("C-x k" . kill-this-buffer))

(use-package multi-term
  :ensure t
  :pin    melpa
  :defer  t
  :bind   ("C-x RET" . multi-term)
  :config (add-to-list 'term-bind-key-alist '("C-z" . term-stop-subjob))
          (setq term-bind-key-alist (delete '("C-r" . isearch-backward) term-bind-key-alist))
          (add-to-list 'term-bind-key-alist '("C-r" . term-send-reverse-search-history)))

(use-package org
  :init   (add-hook 'org-mode-hook #'org-indent-mode)
          (add-hook 'org-mode-hook #'visual-line-mode))

(use-package paredit
  :ensure t
  :pin    melpa-stable)

(use-package prog-mode
  :config (add-hook 'prog-mode-hook #'hs-minor-mode)
          (add-hook 'prog-mode-hook #'whitespace-mode))

(use-package rainbow-delimiters
  :ensure t
  :pin    melpa-stable)

(use-package restclient
  :ensure t
  :pin    melpa
  :defer  t)

(use-package rjsx-mode
  :ensure t
  :pin    melpa-stable
  :defer  t
  :mode   ("\\.js[x]?\\'" . rjsx-mode)
  :init   (add-hook 'js2-mode-hook  'subword-mode)
          (add-hook 'rjsx-mode-hook 'emmet-mode))

(use-package rotate
  :ensure t
  :pin    melpa
  :defer  t
  :bind   ("C-x M-r l" . rotate-layout)
          ("C-x M-r w" . rotate-window))

(use-package smex
  :ensure t
  :pin    melpa-stable
  :bind   (("M-x" . smex)
           ("M-X" . smex-major-mode-commands)
           ("C-c C-c M-x" .  execute-extended-command)))

(use-package sql-mode
  :mode (("\\.sql" . sql-mode)
         ("\\.ddl" . sql-mode)))

(use-package subword
  :diminish subword-mode)

(use-package view
  :config (global-set-key "\C-v" 'View-scroll-half-page-forward)
          (global-set-key "\M-v" 'View-scroll-half-page-backward))

(use-package web-mode
  :ensure t
  :pin    melpa-stable
  :defer  t
  :mode   ("\\.html?\\'" . web-mode)
  :config (setq web-mode-enable-auto-closing  t
                web-mode-markup-indent-offset 2)
  :init   (add-hook 'web-mode-hook 'emmet-mode))

(use-package whitespace
  :diminish whitespace-mode
  :init     (setq whitespace-line-column 80)
            (setq whitespace-style '(face trailing lines-tail tabs)))

(use-package zenburn-theme
  :ensure t
  :pin    melpa-stable
  :config (load-theme 'zenburn t))

;; Prevent loading screen
(setq-default inhibit-startup-screen t)

;; Spaces only (no tab characters at all)!
(setq-default indent-tabs-mode nil)

;; Always show column numbers.
(setq-default column-number-mode t)

;; Stop flashing!
(setq ring-bell-function 'ignore)

;; trim trailing whitespace on saves
(add-hook 'before-save-hook 'delete-trailing-whitespace)

;; I just tripled my productivity
(defalias 'yes-or-no-p 'y-or-n-p)
