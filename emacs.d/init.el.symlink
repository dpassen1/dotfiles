;;; -*- mode: Emacs-Lisp;-*-

(require 'package)
(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/"))
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(setq package-pinned-packages '((use-package . "melpa-stable")))
(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))

(use-package abbrev
  :diminish abbrev-mode)

(use-package autorevert
  :diminish auto-revert-mode
  :config   (global-auto-revert-mode t))

(use-package better-defaults
  :ensure t
  :pin    melpa)

(use-package blacken
  :ensure   t
  :pin      melpa
  :defer    t
  :diminish blacken-mode
  :config   (setq blacken-line-length               80
                  blacken-skip-string-normalization 't)
  :hook     (python-mode . blacken-mode))

(use-package cider
  :ensure t
  :pin    melpa-stable
  :defer  t
  :config (let* ((default-directory (clojure-project-dir))
                 (repl-history-file (expand-file-name ".cider-repl-history")))
            (setq cider-repl-history-file         repl-history-file
                  cider-save-file-on-load         t
                  cider-repl-display-help-banner  nil
                  cider-repl-use-pretty-printing  t
                  cider-mode-line-show-connection nil
                  cider-use-fringe-indicators     nil)))

(use-package clojure-mode
  :ensure t
  :pin    melpa-stable
  :defer  t
  :config (setq clojure-align-forms-automatically t))

(use-package company
  :ensure t
  :pin    melpa-stable
  :defer  t
  :hook   ((cider-repl-mode cider-mode) . company-mode))

(use-package deadgrep
  :ensure t
  :pin    melpa-stable
  :bind   ("C-c r" . deadgrep))

(use-package default-text-scale
  :ensure t
  :pin    melpa
  :bind   (("C-M-+" . default-text-scale-increase)
           ("C-M--" . default-text-scale-decrease)
           ("C-M-0" . default-text-scale-reset)))

(use-package diminish
  :ensure t
  :pin    melpa-stable)

(use-package doneburn-theme
  :ensure t
  :pin    melpa
  :defer  t)

(use-package dumb-jump
  :ensure t
  :pin    melpa-stable
  :bind  (("M-g o" . dumb-jump-go-other-window)
          ("M-g j" . dumb-jump-go)
          ("M-g b" . dumb-jump-back))
  :config (setq dumb-jump-prefer-searcher 'rg))

(use-package emmet-mode
  :ensure t
  :pin    melpa
  :config (setq emmet-preview-default nil)
  :bind   (:map emmet-mode-keymap
           ("C-c w" . nil))
  :hook   (rjsx-mode web-mode))

(use-package expand-region
  :ensure t
  :pin    melpa
  :bind   ("C-c w" . er/expand-region)
  :config (er/enable-mode-expansions 'rjsx-mode 'er/add-html-mode-expansions))

(use-package ffap
  :bind   ("M-g f" . ffap-other-window))

(use-package fzf
  :ensure t
  :pin    melpa
  :bind   ("C-x M-f" . fzf-git)
  :init   (setenv "FZF_DEFAULT_COMMAND" "rg --files"))

(use-package git-timemachine
  :ensure t
  :pin    melpa-stable
  :defer  t)

(use-package golden-ratio
  :ensure   t
  :pin      melpa
  :diminish golden-ratio-mode
  :config   (golden-ratio-mode)
            (add-to-list 'window-size-change-functions 'golden-ratio))

(use-package hideshow
  :diminish hs-minor-mode
  :hook     (prog-mode . hs-minor-mode))

(use-package hide-mode-line
  :ensure t
  :pin    melpa-stable
  :hook   (vterm-mode . hide-mode-line-mode))

(use-package ido-vertical-mode
  :ensure t
  :pin    melpa
  :defer  t
  :init   (ido-vertical-mode t)
  :config (setq ido-vertical-define-keys 'C-n-C-p-up-and-down))

(use-package magit
  :ensure t
  :pin    melpa-stable
  :bind   ("C-x g" . magit-status))

(use-package markdown-mode
  :ensure t
  :pin    melpa-stable
  :defer  t)

(use-package menu-item
  :bind ("C-x k" . kill-this-buffer))

(use-package org
  :init (add-hook 'org-mode-hook #'org-indent-mode)
        (add-hook 'org-mode-hook #'visual-line-mode))

(use-package paredit
  :ensure t
  :pin    melpa-stable
  :hook   ((cider-repl-mode clojure-mode emacs-lisp-mode) . paredit-mode))

(use-package prog-mode
  :config (add-hook 'prog-mode-hook #'display-line-numbers-mode))

(use-package rainbow-delimiters
  :ensure t
  :pin    melpa-stable
  :hook   ((cider-repl-mode prog-mode) . rainbow-delimiters-mode))

(use-package restclient
  :ensure t
  :pin    melpa
  :defer  t)

(use-package rjsx-mode
  :ensure t
  :pin    melpa-stable
  :mode   ("\\.js[x]?\\'" . rjsx-mode))

(use-package smex
  :ensure t
  :pin    melpa-stable
  :bind   (("M-x" . smex)
           ("C-c C-c M-x" . execute-extended-command)))

(use-package sql-mode
  :mode (("\\.sql" . sql-mode)
         ("\\.ddl" . sql-mode)))

(use-package subword
  :diminish subword-mode
  :hook     ((cider-repl-mode clojure-mode js2-mode python-mode) . subword-mode))

(use-package view
  :bind   (("C-v" . View-scroll-half-page-forward)
           ("M-v" . View-scroll-half-page-backward)))

(use-package vterm
  :ensure t
  :pin    melpa
  :defer  t
  :bind   ("C-x RET" . vterm-other-window)
  :config (setq-default vterm-exit-functions #'kill-buffer)
  :custom (vterm-install t))

(use-package web-mode
  :ensure t
  :pin    melpa-stable
  :mode   ("\\.html?\\'" . web-mode)
  :config (setq web-mode-enable-auto-closing  t
                web-mode-markup-indent-offset 2))

(use-package whitespace
  :diminish whitespace-mode
  :init     (setq whitespace-line-column 80
                  whitespace-style       '(face trailing lines-tail tabs))
  :hook     (prog-mode . whitespace-mode))

(use-package zerodark-theme
  :ensure t
  :pin    melpa
  :config (load-theme 'zerodark t))

;; Prevent loading screen
(setq-default inhibit-startup-screen t)

;; Spaces only (no tab characters at all)!
(setq-default indent-tabs-mode nil)

;; Always show column numbers.
(setq-default column-number-mode t)

;; Stop flashing!
(setq ring-bell-function 'ignore)

;; trim trailing whitespace on saves
(add-hook 'before-save-hook 'delete-trailing-whitespace)

;; I just tripled my productivity
(defalias 'yes-or-no-p 'y-or-n-p)

;; Pragmata Pro is my preferred font
(let ((default-font "PragmataPro Liga 12"))
  (add-to-list 'default-frame-alist `(font . ,default-font))
  (set-face-attribute 'default t :font default-font))

;; Stop customize from writing to this file
(setq custom-file (make-temp-file "emacs-custom"))

;; Nice initial size
(when (display-graphic-p)
  (add-to-list 'default-frame-alist '(height . 50))
  (add-to-list 'default-frame-alist '(width . 120)))

;; Just stop it
(setq confirm-kill-processes nil)

;; Use ligatures when available
(when (fboundp 'mac-auto-operator-composition-mode)
  (mac-auto-operator-composition-mode))

;; Various tweaks needed for railwaycat's emacs port
(when (and (eq system-type 'darwin) (display-graphic-p))
  (menu-bar-mode 't)
  (setq mac-option-modifier  'meta
        mac-command-modifier nil))

;; Enter Unicode characters using hex
(setq read-quoted-char-radix 16)

;; Set frame title to the buffer name
(setq-default frame-title-format '("%b - emacs"))
