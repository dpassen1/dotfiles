;;; init.el --- Initialization code ;;; -*- mode: Emacs-Lisp; lexical-binding: t;-*-
;;; Commentary:

;;; Code:

(require 'package)
(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/"))
(add-to-list 'package-archives '("melpa"        . "https://melpa.org/packages/"))
(setq package-pinned-packages '((use-package . "melpa-stable")))

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))

(use-package autorevert
  :config (global-auto-revert-mode t))

(use-package better-defaults
  :ensure t
  :pin    melpa)

(use-package blacken
  :ensure t
  :pin    melpa
  :custom (blacken-only-if-project-is-blackened t)
  :hook   (python-mode . blacken-mode))

(use-package cider
  :ensure t
  :pin    melpa-stable
  :defer  t
  :config (setq cider-repl-history-file
                (expand-file-name ".cider-repl-history" (clojure-project-dir)))
  :custom (cider-save-file-on-load t)
          (cider-repl-display-help-banner nil)
          (cider-use-fringe-indicators nil)
          (cider-prompt-for-symbol nil))

(use-package clojure-mode
  :ensure t
  :pin    melpa-stable
  :defer  t
  :config (require 'flycheck-clj-kondo)
  :custom (clojure-align-forms-automatically t))

(use-package company
  :ensure t
  :pin    melpa-stable
  :hook   ((prog-mode cider-repl-mode) . company-mode))

(use-package deadgrep
  :ensure t
  :pin    melpa-stable
  :bind   ("C-c r" . deadgrep))

(use-package default-text-scale
  :ensure t
  :pin    melpa
  :bind   (("C-M-+" . default-text-scale-increase)
           ("C-M--" . default-text-scale-decrease)
           ("C-M-0" . default-text-scale-reset)))

(use-package display-line-numbers
  :hook (prog-mode . display-line-numbers-mode))

(use-package dockerfile-mode
  :ensure t
  :pin    melpa
  :defer  t)

(use-package dumb-jump
  :ensure t
  :pin    melpa
  :config (add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
  :custom (dumb-jump-prefer-searcher 'rg))

(use-package editorconfig
  :ensure t
  :pin    melpa
  :hook   (prog-mode . editorconfig-mode))

(use-package emmet-mode
  :ensure t
  :pin    melpa
  :custom (emmet-preview-default nil)
  :bind   (:map emmet-mode-keymap
           ("C-c w" . nil))
  :hook   web-mode)

(use-package expand-region
  :ensure t
  :pin    melpa
  :bind   ("C-c w" . er/expand-region))

(use-package feebleline
  :ensure t
  :pin    melpa
  :when   (display-graphic-p)
  :config (feebleline-mode))

(use-package find-file-in-repository
  :ensure t
  :pin    melpa-stable
  :bind   ("C-x M-f" . find-file-in-repository))

(use-package flycheck
  :ensure t
  :pin    melpa-stable
  :hook   (prog-mode . flycheck-mode))

(use-package flycheck-clj-kondo
  :ensure t
  :pin    melpa
  :defer  t)

(use-package hideshow
  :hook (prog-mode . hs-minor-mode))

(use-package ido
  :config (setcar (nthcdr 0 ido-decorations) "")
          (setcar (nthcdr 1 ido-decorations) ""))

(use-package kubel
  :ensure t
  :pin    melpa
  :defer  t)

(use-package magit
  :ensure t
  :pin    melpa
  :bind   (("C-x g" . magit-status)
           ("C-c g" . magit-file-dispatch)))

(use-package markdown-mode
  :ensure t
  :pin    melpa-stable
  :defer  t)

(use-package modus-operandi-theme
  :ensure t
  :pin    melpa-stable
  :config (load-theme 'modus-operandi t))

(use-package paredit
  :ensure t
  :pin    melpa-stable
  :hook   ((cider-repl-mode clojure-mode emacs-lisp-mode) . paredit-mode))

(use-package perspective
  :ensure t
  :pin    melpa-stable
  :config (persp-mode)
  :custom (persp-sort 'access)
          (persp-mode-prefix-key (kbd "C-x C-x")))

(use-package restclient
  :ensure t
  :pin    melpa
  :defer  t)

(use-package smex
  :ensure t
  :pin    melpa-stable
  :bind   ("M-x" . smex)
  :custom (smex-prompt-string ""))

(use-package subword
  :hook ((cider-repl-mode clojure-mode python-mode web-mode) . subword-mode))

(use-package view
  :bind (("C-v" . View-scroll-half-page-forward)
         ("M-v" . View-scroll-half-page-backward)))

(use-package vterm
  :ensure t
  :pin    melpa
  :bind   ("C-x RET" . vterm-other-window)
  :config (setq vterm-exit-functions
                (lambda (buf evt)
                  (when buf (dp/kill-buffer-and-window))))
  :custom (vterm-always-compile-module t)
          (vterm-clear-scrollback-when-clearing t))

(use-package web-mode
  :ensure t
  :pin    melpa-stable
  :mode   ("\\.html?\\'" "\\.jsx?\\'" "\\.css")
  :custom (web-mode-enable-auto-closing t)
          (web-mode-markup-indent-offset 2))

(use-package whitespace
  :custom (whitespace-line-column 80)
          (whitespace-style '(face trailing lines-tail tabs))
  :hook   (prog-mode . whitespace-mode))

(use-package yaml-mode
  :ensure t
  :pin    melpa-stable
  :defer  t)

(use-package zoom
  :ensure t
  :pin    melpa
  :config (zoom-mode t)
  :custom (zoom-size '(0.618 . 0.618)))

;; Prevent loading screen
(setq-default inhibit-startup-screen t)

;; Spaces only (no tab characters at all)!
(setq-default indent-tabs-mode nil)

;; Always show column numbers.
(setq-default column-number-mode t)

;; Stop flashing!
(setq ring-bell-function 'ignore)

;; I just tripled my productivity
(defalias 'yes-or-no-p 'y-or-n-p)

;; Pragmata Pro is my preferred font
(let ((default-font "PragmataPro Liga 12"))
  (add-to-list 'default-frame-alist `(font . ,default-font))
  (set-face-attribute 'default t :font default-font))

;; Stop customize from writing to this file
(setq custom-file (concat user-emacs-directory "custom.el"))
(load custom-file 'noerror)

;; Nice initial size
(when (display-graphic-p)
  (add-to-list 'default-frame-alist '(height . 50))
  (add-to-list 'default-frame-alist '(width . 120)))

;; Just stop it
(setq confirm-kill-processes nil)
(setq kill-buffer-query-functions nil)

;; Use ligatures when available
(when (fboundp 'mac-auto-operator-composition-mode)
  (mac-auto-operator-composition-mode))

;; Various tweaks needed for railwaycat's emacs port
(when (and (eq system-type 'darwin) (display-graphic-p))
  (menu-bar-mode 't)
  (setq mac-option-modifier  'meta
        mac-command-modifier nil))

;; Enter Unicode characters using hex
(setq read-quoted-char-radix 16)

;; Set frame title to the buffer name
(setq-default frame-title-format '("%b - emacs"))

;; Keep layout consistent
(setq max-mini-window-height 1)

;; Kill buffers and windows
(defun dp/kill-buffer-and-window ()
  "Kill buffer and window without propagating any errors."
  (interactive)
  (ignore-errors (kill-buffer-and-window)))

(require 'bind-key)
(bind-key "C-x k" 'dp/kill-buffer-and-window)

;; Collect garbage on your time, not on mine
(require 'frame)

(defun dp/garbage-collect ()
  "Collect garbage when the frame is known to have lost focus."
  (unless (frame-focus-state)
    (garbage-collect)))

(add-function :after after-focus-change-function #'dp/garbage-collect)

(provide 'init)

;;; init.el ends here
